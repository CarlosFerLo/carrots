from pathlib import Path
from typing import List

from ...schema.base import BaseRawTag
from ...schema.enums import TagKind
from ...schema.tags import FunctionRawTag, ClassRawTag, VariableRawTag, MemberRawTag


def parse_ctags_json (path: Path) -> List[BaseRawTag] :
    """ Parse the tags json file generated by ctags.

    Args:
        path (Path): Path to the json file

    Returns:
        List[BaseRawTag]: Raw tags that apear in the file (only supported tags)
        
    Raises:
        ValueError: If the file contains a not supported tag format.
    """
    with open(path, "r") as f:
        content = f.read()
        
    return parse_ctags_json_string(content)

def parse_ctags_json_string(content: str) -> List[BaseRawTag] :
    """Parse a string containing the json output of ctags.

    Args:
        content (str): The string containing the json output of ctags.
        
    Returns:
        List[BaseRawTag]: Raw tags that apear in the file (only supported tags)
        
    Raises:
        ValueError: If the string contains a not supported tag format.
    """
    lines = content.split("\n")
    
    tags = [
        parse_ctags_json_line(line)
        for line in lines    
    ]
    
    tags = [ tag for tag in tags if tag is not None ]
    
    return tags

def parse_ctags_json_line(line: str) -> BaseRawTag :
    """Parse a single line of json output from ctags.

    Args:
        line (str): Line of json output from ctags.

    Returns:
        BaseRawTag: Raw tag that appears in the line (only supported tags)
        None: If the line does not contain a supported tag kind
        
    Raises:
        ValueError: If the line does not contain a supported tag format.
    """
    
    kind_pattern = compile(r'"kind": "(\S*)"')
    
    result = kind_pattern.search(line)
    
    if result is None:
        raise ValueError("Invalid line: " + line)
    
    if result.group(1) == TagKind.FUNCTION :
        return FunctionRawTag.parse_json(line)
    elif result.group(1) == TagKind.CLASS :
        return ClassRawTag.parse_json(line)
    elif result.group(1) == TagKind.VARIABLE :
        return VariableRawTag.parse_json(line)
    elif result.group(1) == TagKind.MEMBER :
        return MemberRawTag.parse_json(line)
    else :
        return None
    
    